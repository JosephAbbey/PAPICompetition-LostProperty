class Item (Title, Photo, Type, Where, StoreID)
    Groups an item's attributes in a way that can be accessed where required

class AtomSafeDB (Database)
    Execute (command: str) -> Result:
        Returns the result of the command being executed in the database with NO ATOMIC SAFETY
    
    GenerateLock -> threading.lock:
        Returns a threading.lock()

    ExecuteAS (commands: List[str], obj: threading.lock) -> List
        Wait until lock can aquired
        Execute each command in turn and store result
        Release lock
        Return results

    ExecuteIterAS (function: F (int, List[str]) -> Union[Tuple[None, Any], str], obj: threading.lock) -> Tuple
        Wait until lock can aquired
        Initiate step to 0
        While F(step, results) is not (None, x),
            Run result of F(step, result)
            Store result
            Increment step
        Release lock
        Return F(step, results)[1]

Globals:
    ASDB: An AtomSafeDB using the Database
    NamesLock: AtomSafeDB.GenerateLock() for accessing the Names table
    ERowsLock: AtomSafeDB.GenerateLock() for accessing the EmptyRows table

Notify manager: (Message: str) -> None (Synchronous)
    Format Message as an email
    Send email

(Asynchronous)
Add item: (Title: str, Photo: Bytes, Type: Int, Where: Int, StoreID: int) -> None
    Verify that inputs exist

    Verify that type is valid (Categories lookup)
    Verify that location is valid (Locations lookup)
    Verify that store ID is below maximum storage

    Use ASDB.ExecuteIterAS(NamesLock) to add the title if it does not already exist, add  a reference to the row, and return title row ID.

    Add new database entry:
        - id        : AUTO
        - title     : Return of ExecuteIterAS
        - category  : Type
        - image     : Photo
        - foundIn   : Where
        - storeIn   : StoreID

Get items: (Types: List[int]) -> List[Items] (Asynchronouss)
    Get from database:
        category in Types
    
    Format items as Items

    Return List[Items]

Remove item: (ID: int) (Asynchronous)
    Verify that input exists

    Verify item with ID exists

    Get title ID

    Create Iter function: (Step: int, List[str]) -> Union[Tuple[None, bool], str]
        - Step = 1: Read refCount
        - Step = 2:
            - refCount = 1:
                Delete row
            - x = refCount:
                Update refCount to x - 1
        - Step = 3:
            - (None, refCount == 1) # True signifies deleted

    ASDB.ExecuteIterAS(NamesLock)

    If above[1] is True, add title ID to EmptyRows (Not AS)

    Remove item

    Notify manager

Item expiry: (Synchronous)
    Get current timestamp - Config.ExpiryTime

    Get list of items before above timestamp (Not AS)

    Remove items by ID

    Format list of items

    Notify manager

Photo get: (ID: int) -> Photo mime
    Verify that input exists

    Verify that ID is a valid Photo

    Get BLOB from database

    Return BLLOB formatted as Photo

Things to add at a later point:
    - SQL Escape on input:
        This is not required as data is only inputed by a trusted source. The only
        way anyone else gets access to the database is reading.